# =============================================================================
# Reusable CI Workflow
# =============================================================================
#
# Purpose: Multi-language continuous integration workflow for automated
#          building, testing, and quality assurance
# Author: Stratovate Solutions DevOps Team
# Version: 2.0
# Last Updated: 2025-08-19
#
# This reusable workflow provides comprehensive CI/CD capabilities for multiple
# programming languages and project types. It automatically detects project
# type and applies appropriate build, test, and quality assurance processes.
#
# Supported Languages & Frameworks:
# - Node.js (npm, yarn, pnpm)
# - Python (pip, poetry, pipenv)
# - .NET (MSBuild, dotnet CLI)
# - PowerShell (PSScriptAnalyzer, Pester)
# - Generic projects (basic validation)
#
# Key Features:
# - Automatic project type detection
# - Dependency caching for faster builds
# - Code quality analysis (linting, static analysis)
# - Unit and integration testing
# - Code coverage reporting
# - Security vulnerability scanning
# - Build artifact generation
# - Cross-platform compatibility
#
# Quality Gates:
# - Linting and code style enforcement
# - Test execution with coverage reporting
# - Security vulnerability detection
# - Build success validation
# - Performance regression detection
#
# Integration Capabilities:
# - GitHub Advanced Security
# - Package registry authentication
# - Code coverage services
# - Quality dashboards
# - Notification systems
# =============================================================================

name: Reusable CI Workflow

# =============================================================================
# Workflow Input Parameters
# =============================================================================
#
# This section defines all configurable parameters that calling workflows
# can use to customize the CI behavior for their specific needs.
#
# Language Version Parameters:
# - Support for multiple runtime versions
# - Automatic detection with sensible defaults
# - Cross-platform compatibility
#
# Execution Control Parameters:
# - Granular control over CI steps
# - Skip options for debugging
# - Working directory support for monorepos
#
# Advanced Configuration:
# - Project type override for complex projects
# - Custom build and test configurations
# - Integration with external services
# =============================================================================

on:
  workflow_call:
    inputs:
      # -------------------------------------------------------------------------
      # Language Runtime Versions
      # -------------------------------------------------------------------------

      node-version:
        description: |
          Node.js version to use for JavaScript/TypeScript projects.
          Supports specific versions (18.16.0) or ranges (18.x, 18).
          Default: '18' (Current LTS)

          Common Versions:
          - '18' (LTS - Recommended for production)
          - '20' (Current - Latest features)
          - '16' (Legacy - End of life April 2024)
        required: false
        default: '18'
        type: string

      python-version:
        description: |
          Python version for Python projects.
          Supports specific versions (3.11.2) or ranges (3.11.x).
          Default: '3.11' (Stable with good performance)

          Common Versions:
          - '3.11' (Recommended - Best performance)
          - '3.10' (Stable - Wide compatibility)
          - '3.12' (Latest - Cutting edge features)
        required: false
        default: '3.11'
        type: string

      dotnet-version:
        description: |
          .NET version for C#/F#/VB.NET projects.
          Supports specific versions (8.0.100) or ranges (8.0.x).
          Default: '8.0.x' (Latest LTS)

          Common Versions:
          - '8.0.x' (LTS - Recommended for new projects)
          - '6.0.x' (LTS - Legacy support until Nov 2024)
          - '7.0.x' (STS - End of life May 2024)
        required: false
        default: '8.0.x'
        type: string

      # -------------------------------------------------------------------------
      # Execution Control Parameters
      # -------------------------------------------------------------------------

      run-tests:
        description: |
          Execute test suites during CI pipeline.
          When false, skips all test execution for faster builds.
          Useful for draft PRs or build-only scenarios.
          Default: true
        required: false
        default: true
        type: boolean

      run-build:
        description: |
          Execute build/compilation steps.
          When false, skips build process (dependencies still installed).
          Useful for test-only or analysis-only runs.
          Default: true
        required: false
        default: true
        type: boolean

      working-directory:
        description: |
          Working directory for all CI operations.
          Useful for monorepos where project is in subdirectory.
          Default: '.' (repository root)

          Examples:
          - '.' (repository root)
          - 'src/frontend' (frontend in subdirectory)
          - 'services/api' (microservice structure)
        required: false
        default: '.'
        type: string

      # -------------------------------------------------------------------------
      # Project Detection and Configuration
      # -------------------------------------------------------------------------

      project-type:
        description: |
          Override automatic project type detection.
          When 'auto-detect', workflow analyzes repository files.
          Use specific type to force particular CI pipeline.

          Supported Types:
          - 'auto-detect' (analyze repository files)
          - 'node' (JavaScript/TypeScript with npm/yarn)
          - 'python' (Python with pip/poetry/pipenv)
          - 'dotnet' (C#/F#/VB.NET with MSBuild)
          - 'powershell' (PowerShell modules/scripts)
          - 'generic' (basic validation only)
        required: false
        default: 'auto-detect'
        type: string

      # -------------------------------------------------------------------------
      # Quality and Coverage Configuration
      # -------------------------------------------------------------------------

      upload-coverage:
        description: |
          Upload code coverage reports to GitHub.
          Enables coverage tracking and PR comments.
          Requires appropriate test framework configuration.
          Default: true
        required: false
        default: true
        type: boolean

      fail-on-coverage-decrease:
        description: |
          Fail CI if code coverage decreases from main branch.
          Helps maintain code quality standards.
          Requires baseline coverage data.
          Default: false (warn only)
        required: false
        default: false
        type: boolean

    # -------------------------------------------------------------------------
    # Required Secrets for Private Dependencies
    # -------------------------------------------------------------------------

    secrets:
      NPM_TOKEN:
        description: |
          NPM authentication token for private package access.
          Required for installing private npm packages from:
          - Private npm registries
          - GitHub Package Registry (@scope/package)
          - Organization-specific package feeds

          Token Scopes:
          - read:packages (minimum for private packages)
          - write:packages (for publishing)

          Security Note: Store in repository or organization secrets
        required: false

      NUGET_API_KEY:
        description: |
          NuGet API key for private package access.
          Required for installing private NuGet packages from:
          - Private NuGet feeds
          - Azure Artifacts
          - GitHub Package Registry

          Security Note: Use encrypted secrets and rotate regularly
        required: false

      GITHUB_TOKEN:
        description: |
          GitHub token for API access and package registry.
          Automatically provided by GitHub Actions.
          Used for:
          - GitHub Package Registry access
          - API calls for coverage reporting
          - Workflow status updates

          Note: Automatically available, typically don't need to pass explicitly
        required: false

# =============================================================================
# Global Workflow Configuration
# =============================================================================

# Security: Define minimal required permissions
permissions:
  contents: read      # Read repository contents
  actions: read       # Read workflow information
  checks: write       # Write check results
  pull-requests: write # Comment on PRs with results

# Environment variables available to all jobs
env:
  # Workflow identification
  WORKFLOW_NAME: "Reusable CI"
  WORKFLOW_VERSION: "2.0"

  # Build optimization
  NODE_OPTIONS: "--max-old-space-size=4096"
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

  # Quality and debugging
  FORCE_COLOR: "1"
  CI: true
  DEBIAN_FRONTEND: noninteractive

# =============================================================================
# CI Pipeline Jobs
# =============================================================================

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Project Type Detection
  # ---------------------------------------------------------------------------
  #
  # Responsibility: Analyze repository structure to determine project type
  # This enables the workflow to automatically select appropriate CI pipeline
  #
  # Detection Logic:
  # - package.json → Node.js project
  # - requirements.txt or pyproject.toml → Python project
  # - *.csproj or *.sln → .NET project
  # - *.ps1 or *.psm1 → PowerShell project
  # - Default → Generic project
  # ---------------------------------------------------------------------------

  detect-project-type:
    name: Detect Project Type
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      project-type: ${{ steps.detect.outputs.project-type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect project type
        id: detect
        run: |
          echo "Working directory: ${{ inputs.working-directory }}"
          cd "${{ inputs.working-directory }}"
          
          if [ "${{ inputs.project-type }}" != "auto-detect" ]; then
            echo "project-type=${{ inputs.project-type }}" >> $GITHUB_OUTPUT
            echo "Using specified project type: ${{ inputs.project-type }}"
          elif [ -f "package.json" ]; then
            echo "project-type=node" >> $GITHUB_OUTPUT
            echo "Detected Node.js project"
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
            echo "project-type=python" >> $GITHUB_OUTPUT
            echo "Detected Python project"
          elif find . -name "*.csproj" -o -name "*.sln" | grep -q .; then
            echo "project-type=dotnet" >> $GITHUB_OUTPUT
            echo "Detected .NET project"
          elif find . -name "*.ps1" -o -name "*.psm1" -o -name "*.psd1" | grep -q .; then
            echo "project-type=powershell" >> $GITHUB_OUTPUT
            echo "Detected PowerShell project"
          else
            echo "project-type=generic" >> $GITHUB_OUTPUT
            echo "Using generic project type (no specific language detected)"
          fi

  # ---------------------------------------------------------------------------
  # Job 2: Node.js CI Pipeline
  # ---------------------------------------------------------------------------
  ci-node:
    if: needs.detect-project-type.outputs.project-type == 'node'
    needs: detect-project-type
    name: Node.js CI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Run linting
        run: |
          if npm run lint --if-present; then
            echo "✅ Linting completed successfully"
          else
            echo "⚠️ No lint script found or linting failed"
            exit 1
          fi

      - name: Run tests
        if: ${{ inputs.run-tests }}
        run: |
          if npm run test --if-present; then
            echo "Tests completed successfully"
          else
            echo "No test script found"
          fi

      - name: Build project
        if: ${{ inputs.run-build }}
        run: |
          if npm run build --if-present; then
            echo "Build completed successfully"
          else
            echo "No build script found"
          fi

  # ---------------------------------------------------------------------------
  # Job 3: Python CI Pipeline
  # ---------------------------------------------------------------------------
  ci-python:
    if: needs.detect-project-type.outputs.project-type == 'python'
    needs: detect-project-type
    name: Python CI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: 'pip'
          cache-dependency-path: ${{ inputs.working-directory }}/requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then 
            echo "Installing requirements.txt"
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then 
            echo "Installing requirements-dev.txt"
            pip install -r requirements-dev.txt
          fi
          if [ -f pyproject.toml ]; then
            echo "Installing with pip (pyproject.toml found)"
            pip install -e .
          fi

      - name: Run linting with flake8
        run: |
          pip install flake8
          echo "Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests with pytest
        if: ${{ inputs.run-tests }}
        run: |
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage to GitHub
        if: ${{ inputs.upload-coverage && inputs.run-tests }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-python
          path: coverage.xml

  # ---------------------------------------------------------------------------
  # Job 4: .NET CI Pipeline
  # ---------------------------------------------------------------------------
  ci-dotnet:
    if: needs.detect-project-type.outputs.project-type == 'dotnet'
    needs: detect-project-type
    name: 🔷 .NET CI
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        if: ${{ inputs.run-build }}
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        if: ${{ inputs.run-tests }}
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"

      - name: Upload coverage to GitHub
        if: ${{ inputs.upload-coverage && inputs.run-tests }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-dotnet
          path: "**/coverage.cobertura.xml"

  # ---------------------------------------------------------------------------
  # Job 5: PowerShell CI Pipeline
  # ---------------------------------------------------------------------------
  ci-powershell:
    if: needs.detect-project-type.outputs.project-type == 'powershell'
    needs: detect-project-type
    name: 💙 PowerShell CI
    runs-on: windows-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "Installing PSScriptAnalyzer..."
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          Write-Host "PSScriptAnalyzer installed successfully"

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "Running PSScriptAnalyzer..."
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary -Severity @('Error', 'Warning', 'Information')
          
          if ($results) {
            Write-Host "PSScriptAnalyzer Results:" -ForegroundColor Yellow
            $results | Format-Table -AutoSize
            
            $errors = $results | Where-Object { $_.Severity -eq 'Error' }
            $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }
            
            Write-Host "Summary:" -ForegroundColor Cyan
            Write-Host "  Errors: $($errors.Count)" -ForegroundColor Red
            Write-Host "  Warnings: $($warnings.Count)" -ForegroundColor Yellow
            Write-Host "  Total Issues: $($results.Count)" -ForegroundColor White
            
            if ($errors.Count -gt 0) {
              Write-Host "PSScriptAnalyzer found $($errors.Count) error(s)" -ForegroundColor Red
              throw "PSScriptAnalyzer found critical issues"
            } else {
              Write-Host "No critical errors found" -ForegroundColor Green
            }
          } else {
            Write-Host "PSScriptAnalyzer found no issues" -ForegroundColor Green
          }

      - name: Install Pester
        if: ${{ inputs.run-tests }}
        shell: pwsh
        run: |
          Write-Host "Installing Pester..."
          Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
          Write-Host "Pester installed successfully"

      - name: Run Pester tests
        if: ${{ inputs.run-tests }}
        shell: pwsh
        run: |
          Write-Host "Looking for tests..."
          $testPaths = @()
          
          # Common test directory patterns
          $possiblePaths = @('Tests', 'Test', 'tests', 'test', 'spec', 'specs')
          
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              $testPaths += $path
              Write-Host "Found test directory: $path" -ForegroundColor Green
            }
          }
          
          # Look for test files in current directory
          $testFiles = Get-ChildItem -Path . -Filter "*.Tests.ps1" -Recurse
          if ($testFiles) {
            Write-Host "Found test files in current directory structure" -ForegroundColor Green
            $testPaths += "."
          }
          
          if ($testPaths.Count -eq 0) {
            Write-Host "No test directories or files found" -ForegroundColor Yellow
            Write-Host "Looked for: Tests/, Test/, tests/, test/, spec/, specs/ directories or *.Tests.ps1 files"
          } else {
            Write-Host "Running Pester tests..." -ForegroundColor Cyan
            
            $config = New-PesterConfiguration
            $config.Run.Path = $testPaths
            $config.TestResult.Enabled = $true
            $config.TestResult.OutputPath = "TestResults.xml"
            $config.TestResult.OutputFormat = "NUnitXml"
            $config.CodeCoverage.Enabled = ${{ inputs.upload-coverage }}
            $config.Output.Verbosity = "Detailed"
            
            $result = Invoke-Pester -Configuration $config
            
            Write-Host "Test Results:" -ForegroundColor Cyan
            Write-Host "  Total: $($result.TotalCount)" -ForegroundColor White
            Write-Host "  Passed: $($result.PassedCount)" -ForegroundColor Green
            Write-Host "  Failed: $($result.FailedCount)" -ForegroundColor Red
            Write-Host "  Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
            
            if ($result.FailedCount -gt 0) {
              throw "$($result.FailedCount) test(s) failed"
            }
            
            Write-Host "All tests passed!" -ForegroundColor Green
          }

      - name: Upload test results
        if: ${{ inputs.run-tests }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-powershell
          path: TestResults.xml
        continue-on-error: true

  # ---------------------------------------------------------------------------
  # Job 6: Generic CI Pipeline
  # ---------------------------------------------------------------------------
  ci-generic:
    if: needs.detect-project-type.outputs.project-type == 'generic'
    needs: detect-project-type
    name:  Generic CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Basic project validation
        run: |
          echo "Performing basic project validation..."
          
          # Check for common project files
          echo "Project structure:"
          ls -la
          
          # Look for documentation
          if [ -f "README.md" ] || [ -f "README.rst" ] || [ -f "README.txt" ]; then
            echo "Documentation found"
          else
            echo "No README file found"
          fi
          
          # Look for license
          if [ -f "LICENSE" ] || [ -f "LICENSE.md" ] || [ -f "LICENSE.txt" ]; then
            echo "License file found"
          else
            echo "No LICENSE file found"
          fi
          
          # Basic file validation
          echo "Project statistics:"
          echo "Total files: $(find . -type f | wc -l)"
          echo "Text files: $(find . -name "*.txt" -o -name "*.md" -o -name "*.rst" | wc -l)"
          
          echo "Basic validation completed"

      - name: Run custom validation
        if: ${{ inputs.run-tests }}
        run: |
          echo "Looking for custom validation scripts..."
          
          # Look for common validation scripts
          if [ -f "validate.sh" ]; then
            echo "Found validate.sh - executing..."
            chmod +x validate.sh
            ./validate.sh
          elif [ -f "test.sh" ]; then
            echo "Found test.sh - executing..."
            chmod +x test.sh
            ./test.sh
          elif [ -f "check.sh" ]; then
            echo "Found check.sh - executing..."
            chmod +x check.sh
            ./check.sh
          else
            echo "No custom validation scripts found"
          fi
