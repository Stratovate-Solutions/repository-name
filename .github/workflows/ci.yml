# =============================================================================
# Continuous Integration Workflow
# =============================================================================
#
# Purpose: Comprehensive CI/CD pipeline for code quality, testing, and security
# Author: Stratovate Solutions DevOps Team
# Version: 2.1
# Last Updated: 2025-08-20
#
# This workflow provides comprehensive continuous integration including:
# - Multi-language project detection and building
# - Automated testing and code quality checks
# - Security vulnerability scanning
# - Dependency analysis and updates
# - Build artifact generation
#
# Workflow Triggers:
# - Push to main/develop branches (production/integration changes)
# - Pull requests targeting main branch (feature integration)
# - Manual dispatch for on-demand testing
#
# Prerequisites:
# - Repository must have appropriate secrets configured:
#   * NPM_TOKEN: For private npm package access
#   * NUGET_API_KEY: For private NuGet package access
#   * GITHUB_TOKEN: Automatically provided by GitHub
#
# Usage Examples:
# - Automatic: Push code or create PR
# - Manual: Use "Run workflow" button in GitHub Actions tab
#
# Monitoring:
# - Check Actions tab for workflow status
# - Review security alerts in Security tab
# - Monitor build artifacts in workflow runs
# =============================================================================

name: CI/CD Pipeline

# =============================================================================
# Workflow Triggers
# =============================================================================
#
# Push Events:
# - main: Production-ready code, triggers full CI/CD pipeline
# - develop: Integration branch for feature testing
#
# Pull Request Events:
# - main: Feature branches merging to production
# - Runs on PR creation, updates, and synchronization
#
# Manual Trigger:
# - workflow_dispatch: Allows manual execution from GitHub UI
# =============================================================================

on:
  # Automated triggers for code changes
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'           # Skip documentation-only changes
      - '.github/**.yml'  # Skip workflow-only changes (optional)
      - 'docs/**'         # Skip documentation directory changes

  # Pull request validation
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

  # Manual execution capability
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean
      skip-tests:
        description: 'Skip test execution (for debugging)'
        required: false
        default: false
        type: boolean

# =============================================================================
# Global Workflow Configuration
# =============================================================================

# Concurrency control to prevent multiple runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set default permissions for GITHUB_TOKEN (principle of least privilege)
permissions:
  contents: read          # Read repository contents
  actions: read          # Read workflow information
  checks: write          # Write check results
  issues: write          # Comment on issues/PRs
  pull-requests: write   # Comment on PRs
  security-events: write # Upload security scan results

# Global environment variables
env:
  # Workflow metadata
  WORKFLOW_VERSION: "2.1"
  ORGANIZATION: "Stratovate-Solutions"

  # Build configuration
  NODE_OPTIONS: "--max-old-space-size=4096"  # Increase Node.js memory limit
  FORCE_COLOR: "1"                           # Enable colored output
  CI: true                                   # Indicate CI environment

# =============================================================================
# CI/CD Jobs Pipeline
# =============================================================================

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Linting and Validation
  # ---------------------------------------------------------------------------
  lint:
    name: üîç Lint & Validate
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üìù Lint YAML Files
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint

      - name: üìÑ Lint Markdown Files
        uses: DavidAnson/markdownlint-cli2-action@v14
        with:
          globs: '**/*.md'

      - name: üîß Validate GitHub Configuration
        shell: bash
        run: |
          echo "=== GitHub Configuration Validation ==="
          
          # Find all workflow files
          workflow_files=$(find .github/workflows -name "*.yml" -o -name "*.yaml" 2>/dev/null || true)
          
          if [ -z "$workflow_files" ]; then
            echo "‚ö†Ô∏è No workflow files found in .github/workflows"
          else
            echo "‚úÖ Found workflow files:"
            echo "$workflow_files" | while read -r file; do
              echo "  - $file"
            done
          fi
          
          # Check for required files
          required_files=(".github/workflows" "README.md")
          for file in "${required_files[@]}"; do
            if [ -e "$file" ]; then
              echo "‚úÖ Found: $file"
            else
              echo "‚ö†Ô∏è Missing: $file"
            fi
          done

  # ---------------------------------------------------------------------------
  # Job 2: Build and Test
  # ---------------------------------------------------------------------------
  build-test:
    name: üèóÔ∏è Build & Test
    # Skip CI on draft PRs (optional optimization)
    if: github.event.pull_request.draft != true
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîç Analyze Project Structure
        shell: pwsh
        run: |
          Write-Host "=== Project Analysis ===" -ForegroundColor Cyan
          Write-Host "Repository: ${{ github.repository }}" -ForegroundColor Green
          Write-Host "Branch: ${{ github.ref_name }}" -ForegroundColor Green
          Write-Host "Commit: ${{ github.sha }}" -ForegroundColor Green
          Write-Host ""
          
          Write-Host "Directory Structure:" -ForegroundColor Yellow
          Get-ChildItem -Recurse -Directory | Select-Object -First 10 | ForEach-Object {
            Write-Host "  $($_.FullName.Replace($pwd.Path, '.'))" -ForegroundColor White
          }
          
          Write-Host ""
          Write-Host "PowerShell Files:" -ForegroundColor Yellow
          $psFiles = Get-ChildItem -Recurse -Include "*.ps1", "*.psm1", "*.psd1"
          $psFiles | Select-Object -First 10 | ForEach-Object {
            Write-Host "  $($_.FullName.Replace($pwd.Path, '.'))" -ForegroundColor White
          }
          Write-Host "  Total PowerShell files: $($psFiles.Count)" -ForegroundColor Green

      - name: ‚öôÔ∏è Setup PowerShell Environment
        shell: pwsh
        run: |
          Write-Host "=== PowerShell Environment Setup ===" -ForegroundColor Cyan
          Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Green
          Write-Host "PowerShell Edition: $($PSVersionTable.PSEdition)" -ForegroundColor Green
          Write-Host "OS: $($PSVersionTable.OS)" -ForegroundColor Green
          
          # Set PowerShell execution policy
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          Write-Host "Execution policy set to RemoteSigned" -ForegroundColor Green

      - name: üì¶ Install Required Modules
        shell: pwsh
        run: |
          Write-Host "=== Installing PowerShell Modules ===" -ForegroundColor Cyan
          
          # Install PSScriptAnalyzer for code quality
          Write-Host "Installing PSScriptAnalyzer..." -ForegroundColor Yellow
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck
          Write-Host "PSScriptAnalyzer installed" -ForegroundColor Green
          
          # Install Pester for testing
          if ('${{ github.event.inputs.skip-tests }}' -ne 'true') {
            Write-Host "Installing Pester..." -ForegroundColor Yellow
            Install-Module -Name Pester -Force -Scope CurrentUser -SkipPublisherCheck
            Write-Host "Pester installed" -ForegroundColor Green
          }
          
          # List installed modules
          Write-Host ""
          Write-Host "Installed Modules:" -ForegroundColor Yellow
          Get-Module -ListAvailable PSScriptAnalyzer, Pester | Format-Table Name, Version -AutoSize

      - name: üîç Run PSScriptAnalyzer
        shell: pwsh
        run: |
          Write-Host "=== PSScriptAnalyzer Code Quality Check ===" -ForegroundColor Cyan
          
          # Run PSScriptAnalyzer with comprehensive rules
          $analysisResults = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary -Severity @('Error', 'Warning', 'Information')
          
          if ($analysisResults) {
            Write-Host "PSScriptAnalyzer Results:" -ForegroundColor Yellow
            $analysisResults | Format-Table -AutoSize
            
            # Categorize results
            $errors = $analysisResults | Where-Object { $_.Severity -eq 'Error' }
            $warnings = $analysisResults | Where-Object { $_.Severity -eq 'Warning' }
            $info = $analysisResults | Where-Object { $_.Severity -eq 'Information' }
            
            Write-Host ""
            Write-Host "Summary:" -ForegroundColor Cyan
            Write-Host "  Errors: $($errors.Count)" -ForegroundColor Red
            Write-Host "  Warnings: $($warnings.Count)" -ForegroundColor Yellow
            Write-Host "  Information: $($info.Count)" -ForegroundColor Blue
            Write-Host "  Total Issues: $($analysisResults.Count)" -ForegroundColor White
            
            # Export results for artifacts
            $analysisResults | Export-Csv -Path "PSScriptAnalyzer-Results.csv" -NoTypeInformation
            $analysisResults | ConvertTo-Json -Depth 3 | Out-File "PSScriptAnalyzer-Results.json"
            
            # Fail on errors
            if ($errors.Count -gt 0) {
              Write-Host ""
              Write-Host "PSScriptAnalyzer found $($errors.Count) error(s)" -ForegroundColor Red
              Write-Host "Please fix these critical issues before proceeding." -ForegroundColor Red
              throw "PSScriptAnalyzer found critical errors"
            } else {
              Write-Host ""
              Write-Host "No critical errors found!" -ForegroundColor Green
            }
          } else {
            Write-Host "PSScriptAnalyzer found no issues!" -ForegroundColor Green
          }

      - name: üß™ Run Pester Tests
        if: github.event.inputs.skip-tests != 'true'
        shell: pwsh
        run: |
          Write-Host "=== Pester Testing ===" -ForegroundColor Cyan
          
          # Look for test directories and files
          $testPaths = @()
          $possibleTestDirs = @('Tests', 'Test', 'tests', 'test', 'spec', 'specs')
          
          foreach ($dir in $possibleTestDirs) {
            if (Test-Path $dir) {
              $testPaths += $dir
              Write-Host "Found test directory: $dir" -ForegroundColor Green
            }
          }
          
          # Look for test files in current directory structure
          $testFiles = Get-ChildItem -Path . -Filter "*.Tests.ps1" -Recurse
          if ($testFiles) {
            Write-Host "Found $($testFiles.Count) test files" -ForegroundColor Green
            if ($testPaths -notcontains ".") {
              $testPaths += "."
            }
          }
          
          if ($testPaths.Count -eq 0) {
            Write-Host "No test directories or files found" -ForegroundColor Yellow
            Write-Host "Searched for: $($possibleTestDirs -join ', ') directories and *.Tests.ps1 files" -ForegroundColor Yellow
            Write-Host "Consider adding tests to improve code quality" -ForegroundColor Blue
          } else {
            Write-Host "Running Pester tests..." -ForegroundColor Cyan
            Write-Host "Test paths: $($testPaths -join ', ')" -ForegroundColor White
            
            # Configure Pester
            $config = New-PesterConfiguration
            $config.Run.Path = $testPaths
            $config.TestResult.Enabled = $true
            $config.TestResult.OutputPath = "TestResults.xml"
            $config.TestResult.OutputFormat = "NUnitXml"
            $config.CodeCoverage.Enabled = $true
            $config.CodeCoverage.OutputPath = "Coverage.xml"
            $config.Output.Verbosity = "Detailed"
            
            # Run tests
            $testResult = Invoke-Pester -Configuration $config
            
            Write-Host ""
            Write-Host "Test Results:" -ForegroundColor Cyan
            Write-Host "  Total Tests: $($testResult.TotalCount)" -ForegroundColor White
            Write-Host "  Passed: $($testResult.PassedCount)" -ForegroundColor Green
            Write-Host "  Failed: $($testResult.FailedCount)" -ForegroundColor Red
            Write-Host "  Skipped: $($testResult.SkippedCount)" -ForegroundColor Yellow
            Write-Host "  Duration: $($testResult.Duration)" -ForegroundColor Blue
            
            if ($testResult.FailedCount -gt 0) {
              Write-Host ""
              Write-Host "$($testResult.FailedCount) test(s) failed!" -ForegroundColor Red
              throw "Test failures detected"
            } else {
              Write-Host ""
              Write-Host "All tests passed!" -ForegroundColor Green
            }
          }

      - name: üìä Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() && hashFiles('TestResults.xml') != ''
        with:
          name: PowerShell Tests
          path: TestResults.xml
          reporter: java-junit

      - name: üìà Generate Build Report
        if: always()
        shell: pwsh
        run: |
          Write-Host "=== Build Report Generation ===" -ForegroundColor Cyan
          
          # Create build report content
          $reportContent = "# PowerShell CI Build Report`n`n"
          $reportContent += "## Build Information`n"
          $reportContent += "- Repository: ${{ github.repository }}`n"
          $reportContent += "- Branch: ${{ github.ref_name }}`n"
          $reportContent += "- Commit: ${{ github.sha }}`n"
          $reportContent += "- Workflow: ${{ github.workflow }}`n"
          $reportContent += "- Run ID: ${{ github.run_id }}`n"
          $reportContent += "- Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n`n"
          
          $reportContent += "## Project Structure`n"
          if (Test-Path "*.ps1") { $reportContent += "- PowerShell scripts found`n" } else { $reportContent += "- No PowerShell scripts found`n" }
          if (Test-Path "*.psm1") { $reportContent += "- PowerShell modules found`n" } else { $reportContent += "- No PowerShell modules found`n" }
          if (Test-Path "*.psd1") { $reportContent += "- PowerShell manifests found`n" } else { $reportContent += "- No PowerShell manifests found`n" }
          if (Test-Path "Tests" -or Test-Path "tests" -or (Get-ChildItem -Filter "*.Tests.ps1" -Recurse)) { $reportContent += "- Tests found`n" } else { $reportContent += "- No tests found`n" }
          
          $reportContent += "`n## Quality Checks`n"
          if (Test-Path "PSScriptAnalyzer-Results.csv") { 
            $results = Import-Csv "PSScriptAnalyzer-Results.csv"
            $errors = ($results | Where-Object { $_.Severity -eq 'Error' }).Count
            $warnings = ($results | Where-Object { $_.Severity -eq 'Warning' }).Count
            $reportContent += "- PSScriptAnalyzer: $($results.Count) total issues ($errors errors, $warnings warnings)`n"
          } else { 
            $reportContent += "- PSScriptAnalyzer: No issues found`n"
          }
          
          if (Test-Path "TestResults.xml") { 
            $reportContent += "- Pester Tests: Test results available`n"
          } else { 
            $reportContent += "- Pester Tests: No test results (tests may not have run)`n"
          }
          
          $reportContent += "`n## Next Steps`n"
          if (Test-Path "PSScriptAnalyzer-Results.csv") {
            $results = Import-Csv "PSScriptAnalyzer-Results.csv"
            $errors = $results | Where-Object { $_.Severity -eq 'Error' }
            if ($errors.Count -gt 0) {
              $reportContent += "- Action Required: Fix $($errors.Count) PSScriptAnalyzer error(s) before merging`n"
            } else {
              $reportContent += "- Ready: Code quality checks passed`n"
            }
          } else {
            $reportContent += "- Ready: All checks completed successfully`n"
          }
          
          $reportContent += "`n---`nGenerated by Stratovate Solutions CI/CD Pipeline`n"
          
          # Write report to file
          $reportContent | Out-File "BuildReport.md" -Encoding UTF8
          Write-Host "Build report generated: BuildReport.md" -ForegroundColor Green
          
          # Display report in logs
          Write-Host ""
          Write-Host "Build Report:" -ForegroundColor Yellow
          Write-Host $reportContent -ForegroundColor White

      - name: üì¶ Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts
          path: |
            PSScriptAnalyzer-Results.csv
            PSScriptAnalyzer-Results.json
            TestResults.xml
            Coverage.xml
            BuildReport.md
          retention-days: 30

  # ---------------------------------------------------------------------------
  # Job 3: Security Scanning
  # ---------------------------------------------------------------------------
  security:
    name: üõ°Ô∏è Security Scan
    # Run security scans in parallel with CI for faster feedback
    if: github.event.pull_request.draft != true
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for comprehensive secret scanning
          fetch-depth: 0

      - name: üîç CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config: |
            paths-ignore:
              - "**/*.md"
              - "**/docs/**"

      - name: üèóÔ∏è CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: üìä CodeQL Results
        uses: github/codeql-action/analyze@v3

      - name: üõ°Ô∏è PowerShell Security Analysis
        shell: pwsh
        run: |
          Write-Host "Running PowerShell security analysis..." -ForegroundColor Yellow
          
          # Check for common security issues in PowerShell scripts
          Get-ChildItem -Path . -Filter "*.ps1" -Recurse | ForEach-Object {
            $content = Get-Content $_.FullName -Raw
            
            # Check for potential security issues
            $issues = @()
            
            if ($content -match "Invoke-Expression|iex") {
              $issues += "Potential code injection risk: Invoke-Expression found"
            }
            
            if ($content -match "ExecutionPolicy\s+Bypass") {
              $issues += "Execution policy bypass detected"
            }
            
            if ($content -match "System\.Net\.WebClient|Invoke-WebRequest.*-UseBasicParsing") {
              $issues += "Web request without proper validation"
            }
            
            if ($issues.Count -gt 0) {
              Write-Host "Security issues in $($_.Name):" -ForegroundColor Red
              $issues | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
            }
          }
          
          Write-Host "PowerShell security analysis completed" -ForegroundColor Green

      - name: üîç Basic Dependency Scan
        run: |
          echo "Basic dependency scanning..."
          
          # Check for common dependency files
          if [ -f "package.json" ]; then
            echo "Found package.json - checking for npm vulnerabilities"
            if command -v npm >/dev/null 2>&1; then
              npm audit --audit-level=moderate || echo "npm audit found some issues"
            fi
          fi
          
          if [ -f "requirements.txt" ]; then
            echo "Found requirements.txt - Python dependency file detected"
            echo "Consider using pip-audit or safety for Python security scanning"
          fi
          
          echo "Basic dependency scan completed"

      - name: üîë Basic Secret Scanning
        run: |
          echo "Basic secret scanning..."
          
          # Simple grep-based secret detection
          echo "Checking for potential secrets..."
          
          # Check for common secret patterns
          secrets_found=false
          
          if grep -r "password\s*=" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" 2>/dev/null; then
            echo "Found potential password references"
            secrets_found=true
          fi
          
          if grep -r "api[_-]?key\s*=" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" 2>/dev/null; then
            echo "Found potential API key references"
            secrets_found=true
          fi
          
          if [ "$secrets_found" = true ]; then
            echo "Potential secrets detected - please review"
            echo "This is a basic scan. Consider using dedicated secret scanning tools"
          else
            echo "No obvious secrets detected"
          fi

  # ---------------------------------------------------------------------------
  # Job 4: Build Validation Summary
  # ---------------------------------------------------------------------------
  build-summary:
    name: üìã Build Summary
    runs-on: ubuntu-latest
    needs: [lint, build-test, security]
    if: always()  # Run even if previous jobs fail

    steps:
      - name: üìä Pipeline Summary
        run: |
          echo "::group::Pipeline Results"
          echo "Lint Status: ${{ needs.lint.result }}"
          echo "Build & Test Status: ${{ needs.build-test.result }}"
          echo "Security Status: ${{ needs.security.result }}"

          # Determine overall status
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.build-test.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
            echo "‚úÖ Pipeline Status: SUCCESS"
            echo "All checks passed! Ready for review/merge."
          elif [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.build-test.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "‚ùå Pipeline Status: FAILURE"
            echo "One or more checks failed. Please review the logs."
            exit 1
          else
            echo "‚ö†Ô∏è Pipeline Status: PARTIAL"
            echo "Some checks were skipped or cancelled."
          fi
          echo "::endgroup::"

      - name: üí¨ PR Comment (on failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ö†Ô∏è CI Pipeline Failed

              The continuous integration pipeline has failed. Please check the following:

              - **Lint & Validate**: ${{ needs.lint.result }}
              - **Build & Test**: ${{ needs.build-test.result }}
              - **Security Scan**: ${{ needs.security.result }}

              ### Next Steps:
              1. Review the failed job logs above
              2. Fix any identified issues  
              3. Push your changes to re-trigger the pipeline

              For help, check our [Contributing Guide](../CONTRIBUTING.md) or contact the DevOps team.
              `
            })
