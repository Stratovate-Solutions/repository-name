# =============================================================================
# Continuous Integration Workflow
# =============================================================================
#
# Purpose: Automated CI/CD pipeline for code quality, testing, and security
# Author: Stratovate Solutions DevOps Team
# Version: 2.0
# Last Updated: 2025-08-19
#
# This workflow provides comprehensive continuous integration including:
# - Multi-language project detection and building
# - Automated testing and code quality checks
# - Security vulnerability scanning
# - Dependency analysis and updates
# - Build artifact generation
#
# Workflow Triggers:
# - Push to main/develop branches (production/integration changes)
# - Pull requests targeting main branch (feature integration)
# - Manual dispatch for on-demand testing
#
# Prerequisites:
# - Repository must have appropriate secrets configured:
#   * NPM_TOKEN: For private npm package access
#   * NUGET_API_KEY: For private NuGet package access
#   * GITHUB_TOKEN: Automatically provided by GitHub
#
# Usage Examples:
# - Automatic: Push code or create PR
# - Manual: Use "Run workflow" button in GitHub Actions tab
#
# Monitoring:
# - Check Actions tab for workflow status
# - Review security alerts in Security tab
# - Monitor build artifacts in workflow runs
# =============================================================================

name: Continuous Integration

# =============================================================================
# Workflow Triggers
# =============================================================================
#
# Push Events:
# - main: Production-ready code, triggers full CI/CD pipeline
# - develop: Integration branch for feature testing
#
# Pull Request Events:
# - main: Feature branches merging to production
# - Runs on PR creation, updates, and synchronization
#
# Manual Trigger:
# - workflow_dispatch: Allows manual execution from GitHub UI
# =============================================================================

on:
  # Automated triggers for code changes
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'           # Skip documentation-only changes
      - '.github/**.yml'  # Skip workflow-only changes (optional)
      - 'docs/**'         # Skip documentation directory changes

  # Pull request validation
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

  # Manual execution capability
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean
      skip-tests:
        description: 'Skip test execution (for debugging)'
        required: false
        default: false
        type: boolean

# =============================================================================
# Global Workflow Configuration
# =============================================================================

# Set default permissions for GITHUB_TOKEN (principle of least privilege)
permissions:
  contents: read          # Read repository contents
  actions: read          # Read workflow information
  checks: write          # Write check results
  issues: write          # Comment on issues/PRs
  pull-requests: write   # Comment on PRs
  security-events: write # Upload security scan results

# Global environment variables
env:
  # Workflow metadata
  WORKFLOW_VERSION: "2.0"
  ORGANIZATION: "Stratovate-Solutions"

  # Build configuration
  NODE_OPTIONS: "--max-old-space-size=4096"  # Increase Node.js memory limit
  FORCE_COLOR: "1"                           # Enable colored output
  CI: true                                   # Indicate CI environment

# =============================================================================
# CI/CD Jobs Pipeline
# =============================================================================

jobs:
  # ---------------------------------------------------------------------------
  # Job 1: Continuous Integration
  # ---------------------------------------------------------------------------
  #
  # Responsibilities:
  # - Auto-detect project type (Node.js, Python, .NET, PowerShell)
  # - Install dependencies and build project
  # - Run linting and code quality checks
  # - Execute unit and integration tests
  # - Generate code coverage reports
  # - Cache dependencies for faster subsequent runs
  #
  # Supported Project Types:
  # - Node.js (package.json detected)
  # - Python (requirements.txt, pyproject.toml)
  # - .NET (*.csproj, *.sln files)
  # - PowerShell (*.ps1, *.psm1 files)
  # - Generic (fallback for other project types)
  # ---------------------------------------------------------------------------

  ci:
    name: üîç Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent runaway jobs

    # Skip CI on draft PRs (optional optimization)
    if: github.event.pull_request.draft != true

    steps:
      - name: üìä Workflow Information
        run: |
          echo "::group::Workflow Context"
          echo "Workflow: ${{ github.workflow }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Debug Mode: ${{ github.event.inputs.debug || 'false' }}"
          echo "Skip Tests: ${{ github.event.inputs.skip-tests || 'false' }}"
          echo "::endgroup::"

    # Use our centralized reusable CI workflow
    uses: Stratovate-Solutions/.github/.github/workflows/reusable-ci.yml@main
    with:
      # Project detection and build configuration
      project-type: 'auto-detect'        # Let workflow detect project type
      node-version: '18'                  # Node.js LTS version
      python-version: '3.11'             # Python stable version
      dotnet-version: '8.0.x'            # .NET LTS version

      # Execution control
      run-tests: ${{ github.event.inputs.skip-tests != 'true' }}
      run-build: true

      # Working directory (for monorepos)
      working-directory: '.'

      # Quality and security settings
      upload-coverage: true               # Upload code coverage to GitHub
      fail-on-coverage-decrease: false    # Don't fail on coverage regression (yet)

    secrets:
      # Package registry authentication
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      # Additional secrets for private dependencies
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ---------------------------------------------------------------------------
  # Job 2: Security Scanning
  # ---------------------------------------------------------------------------
  #
  # Responsibilities:
  # - Scan for known vulnerabilities in dependencies
  # - Static Application Security Testing (SAST)
  # - Secret scanning for exposed credentials
  # - License compliance checking
  # - Generate security reports and alerts
  #
  # Security Tools Included:
  # - GitHub Advanced Security (CodeQL)
  # - Dependency vulnerability scanning
  # - Container image scanning (if applicable)
  # - Infrastructure as Code security analysis
  # ---------------------------------------------------------------------------

  security:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # Run security scans in parallel with CI for faster feedback
    # Also run on schedule for periodic security checks
    if: github.event.pull_request.draft != true

    steps:
      - name: üîê Security Scan Information
        run: |
          echo "::group::Security Scan Context"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Scan Type: Comprehensive (dependencies, code, secrets)"
          echo "::endgroup::"

    # Use our centralized security scanning workflow
    uses: Stratovate-Solutions/.github/.github/workflows/reusable-security-scan.yml@main
    with:
      # Comprehensive security scanning
      scan-type: 'all'                   # Run all available security scans

      # Scanning configuration
      include-dependencies: true         # Scan npm/pip/nuget dependencies
      include-code-analysis: true        # Static code analysis
      include-secrets: true              # Scan for exposed secrets
      include-licenses: true             # Check license compliance

      # Severity thresholds
      fail-on-severity: 'high'           # Fail workflow on high/critical issues
      report-format: 'sarif'             # Generate SARIF report for GitHub

    secrets:
      # Security scanning may need these for private repos
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ---------------------------------------------------------------------------
  # Job 3: Build Validation Summary
  # ---------------------------------------------------------------------------
  #
  # Responsibilities:
  # - Wait for all previous jobs to complete
  # - Provide overall pipeline status
  # - Generate build summary and notifications
  # - Set final PR check status
  # ---------------------------------------------------------------------------

  build-summary:
    name: üìã Build Summary
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: always()  # Run even if previous jobs fail

    steps:
      - name: üìä Pipeline Summary
        run: |
          echo "::group::Pipeline Results"
          echo "CI Status: ${{ needs.ci.result }}"
          echo "Security Status: ${{ needs.security.result }}"

          # Determine overall status
          if [[ "${{ needs.ci.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
            echo "‚úÖ Pipeline Status: SUCCESS"
            echo "All checks passed! Ready for review/merge."
          elif [[ "${{ needs.ci.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "‚ùå Pipeline Status: FAILURE"
            echo "One or more checks failed. Please review the logs."
            exit 1
          else
            echo "‚ö†Ô∏è Pipeline Status: PARTIAL"
            echo "Some checks were skipped or cancelled."
          fi
          echo "::endgroup::"

      - name: üí¨ PR Comment (on failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üö® CI Pipeline Failed

              The continuous integration pipeline has failed. Please check the following:

              - **CI Build**: ${{ needs.ci.result }}
              - **Security Scan**: ${{ needs.security.result }}

              ### Next Steps:
              1. Review the failed job logs above
              2. Fix any identified issues
              3. Push your changes to re-trigger the pipeline

              For help, check our [Contributing Guide](../CONTRIBUTING.md) or contact the DevOps team.
              `
            })
