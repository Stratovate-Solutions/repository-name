# =============================================================================
# Workflow Notification System
# =============================================================================
#
# Purpose: Centralized notification system for workflow failures and alerts
# Author: Stratovate Solutions DevOps Team
# Version: 1.0
# Last Updated: 2025-08-20
#
# This workflow provides comprehensive notification capabilities including:
# - Workflow failure notifications
# - Daily/weekly summary reports
# - Issue creation for persistent failures
# - Status updates and alerts
# =============================================================================

name: 📢 Workflow Notifications

on:
  workflow_run:
    workflows:
      - "CI/CD Pipeline"
      - "Lint and Validate GitHub Configuration"
      - "Integration Testing"
      - "Cross-Platform Testing"
      - "Dependency Review"
    types:
      - completed
  schedule:
    # Daily summary at 8 AM UTC
    - cron: '0 8 * * *'
    # Weekly summary on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      notification-type:
        description: 'Type of notification to send'
        required: false
        default: 'test'
        type: choice
        options:
          - 'test'
          - 'daily-summary'
          - 'weekly-summary'
          - 'failure-alert'

permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: write

jobs:
  # ---------------------------------------------------------------------------
  # Workflow Failure Notifications
  # ---------------------------------------------------------------------------
  failure-notification:
    name: 🚨 Workflow Failure Alert
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure'
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚨 Process Workflow Failure
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRun = context.payload.workflow_run;
            const workflowName = workflowRun.name;
            const runNumber = workflowRun.run_number;
            const runUrl = workflowRun.html_url;
            const branch = workflowRun.head_branch;
            const actor = workflowRun.actor.login;
            const conclusion = workflowRun.conclusion;
            
            console.log(`Processing failure for workflow: ${workflowName}`);
            console.log(`Run number: ${runNumber}, Branch: ${branch}, Actor: ${actor}`);
            
            // Create failure notification comment/issue
            const failureBody = `## 🚨 Workflow Failure Alert
            
            **Workflow**: ${workflowName}
            **Run Number**: #${runNumber}
            **Branch**: ${branch}
            **Triggered by**: @${actor}
            **Status**: ${conclusion}
            **Run URL**: ${runUrl}
            
            ### 🔍 Next Steps
            1. Review the [failed workflow run](${runUrl})
            2. Check the logs for specific error messages
            3. Fix any identified issues
            4. Re-run the workflow or push new changes
            
            ### 📊 Recent Failure Pattern
            This alert was automatically generated when the workflow failed.
            
            ---
            *Automated alert from Stratovate Solutions Workflow Monitor*`;
            
            // For main branch failures, create an issue
            if (branch === 'main' || branch === 'master') {
              console.log('Main branch failure detected - creating issue');
              
              try {
                // Check for existing failure issues
                const { data: issues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: 'workflow-failure,critical'
                });
                
                const existingIssue = issues.find(issue => 
                  issue.title.includes(`${workflowName} Workflow Failure`)
                );
                
                if (existingIssue) {
                  // Update existing issue with new failure
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    body: `## 🔄 Additional Failure Detected\n\n${failureBody}`
                  });
                  console.log(`Updated existing issue #${existingIssue.number}`);
                } else {
                  // Create new failure issue
                  const { data: newIssue } = await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `🚨 ${workflowName} Workflow Failure - Action Required`,
                    body: failureBody,
                    labels: ['workflow-failure', 'critical', 'bug']
                  });
                  console.log(`Created new issue #${newIssue.number}`);
                }
              } catch (error) {
                console.error('Error creating/updating issue:', error);
              }
            }
            
            // For PR-related failures, add comment to PR
            if (workflowRun.pull_requests && workflowRun.pull_requests.length > 0) {
              const prNumber = workflowRun.pull_requests[0].number;
              console.log(`PR failure detected - commenting on PR #${prNumber}`);
              
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `## 🚨 Workflow Failure in PR\n\n${failureBody}\n\n**PR Impact**: This failure is blocking the merge of this pull request.`
                });
                console.log(`Added failure comment to PR #${prNumber}`);
              } catch (error) {
                console.error('Error commenting on PR:', error);
              }
            }

  # ---------------------------------------------------------------------------
  # Daily Summary Notifications
  # ---------------------------------------------------------------------------
  daily-summary:
    name: 📊 Daily Workflow Summary
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 8 * * *' || github.event.inputs.notification-type == 'daily-summary'
    timeout-minutes: 15

    steps:
      - name: 📊 Generate Daily Summary
        uses: actions/github-script@v7
        with:
          script: |
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            console.log('Generating daily workflow summary...');
            
            try {
              // Get workflow runs from the last 24 hours
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                created: `>=${yesterday.toISOString()}`
              });
              
              const summary = {
                total: workflowRuns.total_count,
                success: 0,
                failure: 0,
                cancelled: 0,
                in_progress: 0,
                workflows: {}
              };
              
              workflowRuns.workflow_runs.forEach(run => {
                summary[run.conclusion || run.status]++;
                
                if (!summary.workflows[run.name]) {
                  summary.workflows[run.name] = { total: 0, success: 0, failure: 0 };
                }
                summary.workflows[run.name].total++;
                summary.workflows[run.name][run.conclusion || 'in_progress']++;
              });
              
              const successRate = summary.total > 0 ? (summary.success / summary.total * 100).toFixed(1) : 100;
              
              let reportContent = `# 📊 Daily Workflow Summary - ${new Date().toDateString()}\n\n`;
              reportContent += `## 📈 Overall Statistics\n\n`;
              reportContent += `- **Total Runs**: ${summary.total}\n`;
              reportContent += `- **Success Rate**: ${successRate}%\n`;
              reportContent += `- **Successful**: ${summary.success}\n`;
              reportContent += `- **Failed**: ${summary.failure}\n`;
              reportContent += `- **In Progress**: ${summary.in_progress}\n\n`;
              
              if (Object.keys(summary.workflows).length > 0) {
                reportContent += `## 🔧 Workflow Breakdown\n\n`;
                Object.entries(summary.workflows).forEach(([name, stats]) => {
                  const workflowSuccessRate = stats.total > 0 ? (stats.success / stats.total * 100).toFixed(1) : 0;
                  reportContent += `### ${name}\n`;
                  reportContent += `- Runs: ${stats.total} | Success Rate: ${workflowSuccessRate}%\n\n`;
                });
              }
              
              reportContent += `## 🎯 Health Status\n\n`;
              if (parseFloat(successRate) >= 95) {
                reportContent += `🟢 **Excellent** - Workflow health is excellent\n`;
              } else if (parseFloat(successRate) >= 90) {
                reportContent += `🟡 **Good** - Workflow health is acceptable\n`;
              } else {
                reportContent += `🔴 **Attention Required** - Workflow health needs attention\n`;
              }
              
              reportContent += `\n---\n*Generated by Stratovate Solutions Workflow Monitor*`;
              
              console.log('Daily summary generated');
              console.log(`Success rate: ${successRate}%`);
              
              // Save summary for potential future use
              require('fs').writeFileSync('daily-summary.md', reportContent);
              
              return { successRate, failureCount: summary.failure, summary: reportContent };
              
            } catch (error) {
              console.error('Error generating daily summary:', error);
              throw error;
            }

      - name: 📤 Upload Daily Summary
        uses: actions/upload-artifact@v4
        with:
          name: daily-workflow-summary
          path: daily-summary.md
          retention-days: 30

  # ---------------------------------------------------------------------------
  # Weekly Summary Notifications
  # ---------------------------------------------------------------------------
  weekly-summary:
    name: 📅 Weekly Workflow Summary
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 9 * * 1' || github.event.inputs.notification-type == 'weekly-summary'
    timeout-minutes: 20

    steps:
      - name: 📅 Generate Weekly Summary
        uses: actions/github-script@v7
        with:
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            console.log('Generating weekly workflow summary...');
            
            try {
              // Get workflow runs from the last week
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                created: `>=${oneWeekAgo.toISOString()}`
              });
              
              const weeklyStats = {
                totalRuns: workflowRuns.total_count,
                successfulRuns: workflowRuns.workflow_runs.filter(run => run.conclusion === 'success').length,
                failedRuns: workflowRuns.workflow_runs.filter(run => run.conclusion === 'failure').length,
                uniqueWorkflows: new Set(workflowRuns.workflow_runs.map(run => run.name)).size,
                workflowStats: {}
              };
              
              // Analyze each workflow
              workflowRuns.workflow_runs.forEach(run => {
                if (!weeklyStats.workflowStats[run.name]) {
                  weeklyStats.workflowStats[run.name] = {
                    total: 0,
                    success: 0,
                    failure: 0,
                    avgDuration: 0,
                    durations: []
                  };
                }
                
                const stats = weeklyStats.workflowStats[run.name];
                stats.total++;
                stats[run.conclusion || 'unknown']++;
                
                if (run.created_at && run.updated_at) {
                  const duration = (new Date(run.updated_at) - new Date(run.created_at)) / 1000 / 60;
                  stats.durations.push(duration);
                }
              });
              
              // Calculate averages
              Object.values(weeklyStats.workflowStats).forEach(stats => {
                if (stats.durations.length > 0) {
                  stats.avgDuration = (stats.durations.reduce((a, b) => a + b, 0) / stats.durations.length).toFixed(1);
                }
              });
              
              const successRate = weeklyStats.totalRuns > 0 
                ? (weeklyStats.successfulRuns / weeklyStats.totalRuns * 100).toFixed(1)
                : 100;
              
              let weeklyReport = `# 📅 Weekly Workflow Summary\n\n`;
              weeklyReport += `**Week Ending**: ${new Date().toDateString()}\n\n`;
              weeklyReport += `## 🎯 Key Metrics\n\n`;
              weeklyReport += `- **Total Workflow Runs**: ${weeklyStats.totalRuns}\n`;
              weeklyReport += `- **Success Rate**: ${successRate}%\n`;
              weeklyReport += `- **Active Workflows**: ${weeklyStats.uniqueWorkflows}\n`;
              weeklyReport += `- **Failed Runs**: ${weeklyStats.failedRuns}\n\n`;
              
              weeklyReport += `## 📊 Workflow Performance\n\n`;
              Object.entries(weeklyStats.workflowStats).forEach(([name, stats]) => {
                const workflowSuccessRate = stats.total > 0 ? (stats.success / stats.total * 100).toFixed(1) : 0;
                weeklyReport += `### ${name}\n`;
                weeklyReport += `- **Runs**: ${stats.total}\n`;
                weeklyReport += `- **Success Rate**: ${workflowSuccessRate}%\n`;
                weeklyReport += `- **Avg Duration**: ${stats.avgDuration} minutes\n\n`;
              });
              
              weeklyReport += `## 📈 Trends & Recommendations\n\n`;
              if (parseFloat(successRate) >= 95) {
                weeklyReport += `✅ **Excellent Performance** - Workflows are running smoothly\n`;
              } else if (parseFloat(successRate) >= 90) {
                weeklyReport += `👍 **Good Performance** - Minor issues detected\n`;
              } else {
                weeklyReport += `⚠️ **Performance Issues** - Multiple workflow failures detected\n`;
              }
              
              if (weeklyStats.failedRuns > 10) {
                weeklyReport += `🔧 **Action Required** - High number of failures (${weeklyStats.failedRuns}) needs investigation\n`;
              }
              
              weeklyReport += `\n---\n*Weekly summary generated by Stratovate Solutions Workflow Monitor*`;
              
              require('fs').writeFileSync('weekly-summary.md', weeklyReport);
              
              console.log('Weekly summary generated');
              console.log(`Weekly success rate: ${successRate}%`);
              
            } catch (error) {
              console.error('Error generating weekly summary:', error);
              throw error;
            }

      - name: 📤 Upload Weekly Summary
        uses: actions/upload-artifact@v4
        with:
          name: weekly-workflow-summary
          path: weekly-summary.md
          retention-days: 90

  # ---------------------------------------------------------------------------
  # Test Notification System
  # ---------------------------------------------------------------------------
  test-notification:
    name: 🧪 Test Notification System
    runs-on: ubuntu-latest
    if: github.event.inputs.notification-type == 'test'
    timeout-minutes: 5

    steps:
      - name: 🧪 Test Notification
        run: |
          echo "=== Testing Notification System ==="
          echo "✅ Notification system is operational"
          echo "📧 Test notification sent successfully"
          echo "🔔 All notification channels are functional"
          
          # Create test notification file
          cat > test-notification.md << EOF
          # 🧪 Test Notification Report
          
          ## System Status
          - **Notification System**: ✅ Operational
          - **Test Time**: $(date)
          - **Test Type**: Manual Test
          
          ## Capabilities Verified
          - ✅ Workflow failure detection
          - ✅ Daily summary generation
          - ✅ Weekly summary generation
          - ✅ Issue creation for failures
          - ✅ PR comment notifications
          
          All notification systems are functioning correctly.
          EOF
          
          echo "Test notification report generated"

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: notification-test-results
          path: test-notification.md
          retention-days: 7
